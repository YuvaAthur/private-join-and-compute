/*
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package private_join_and_compute;

// Holds a set of encrypted values.
message EncryptedSet {
  repeated EncryptedElement elements = 1;
}

/*============================================================*/
//YAR:: Add: Additional Data Column
message EncryptedElement {
  optional bytes element = 1;
  optional bytes associated_data_1 = 2;
  optional bytes associated_data_2 = 3;
}

/*============================================================*/
//YAR:: Add: Operators supported
//  Dependencies
//      -  on the homomorphic encryption used
//      -  applied on ONE Column only
//  Possible : 
//      1) sum(col) --> avg(col) = sum(col)/n
//      2) sum(col^2) 
//      3) varn(col) = sum([(x-avg(col))^2])
message OpCode {
  enum Operator {
    SUM = 0;
    SUMSQ = 1;
    VARN = 2;
  }
  required Operator op = 1 [default = SUM];
}


// // message EncryptedElement1 {
// //   optional bytes element = 1;
// //   optional bytes associated_data_1 = 2;
// //   optional bytes associated_data_2 = 3;
// //   optional bytes associated_data_3 = 4;
// //   optional bytes associated_data_4 = 5;
// //   optional bytes associated_data_5 = 6;
// // }

// //YAR::Edit : Extending to possibly multiple associated_data elements
// message EncryptedElement2 {
//   optional bytes element = 1;
//   repeated bytes associated_data = 2;
// }


// /**************************************************************/
// //YAR:: Add : Adding a way send operator codes applied on business data

// /*============================================================*/
// //YAR:: Add : Multiple Column support
// //  This is a column aggregate operation 
// //  First element's operation decides for the complete column
// message EncryptedSetOp {
//   repeated EncryptedElementOp elements = 1;
// }

// message EncryptedElementOp{
//   optional bytes element = 1;
//   repeated ElementOp associated_data = 2;
// } 

// /*============================================================*/
// /*------------------------------------------------------------*/
// //YAR:: Add : Design 2: ColOp : Keep operator associated with column
// // message ElementOp {
// //   optional bytes data =1;
// //   optional OpCode operation = 2;
// // }

// /*------------------------------------------------------------*/
// //YAR:: Add : Design 1: OpCodeList sent independently
// //  Only looking at the distribution characteristics of one column
// //  Cross-column expressions : Future work
// message OpCodeList {
//   repeated OpCode op_list = 1;
// }

